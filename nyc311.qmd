---
title: 'Stat 3255 Midterm Project: Analysis of NYC Open Data of 311 Service Requests'
author: 'Ethan Long'
toc: true
number-sections: true
highlight-style: pygments
format: 
  pdf: 
    documentclass: article
    number-sections: true
    toc: true
    geometry:
      - top=30mm
      - left=20mm
    html:
      code-fold: true
      html-math-method: katex
---

# Introduction

The midterm project of Stat-3255 tasks us with telling a story of NYC Open Data
311 Service Requests. More specficially Street Flooding (SF) and Catch Basin
(CB) complaints. SF complaints indicates instances of street flooding, while BC
complaints indicate instances of catch basin drains failing to properly drain. 
This could be caused by several reasons, most commonly due to drain blockages.



# Importing and Cleaning Data 

To start we must properly import our data file and clean where necessary. 

Import Data
```{python}

# Import necessary packages
import pandas as pd
import numpy as np
import os 

# Initialize file path to variable 'file'
csv_file = 'nycflood2024.csv'

# Read csv file
nyc_flood = pd.read_csv(csv_file)

# Print first 5 rows, get familiar with dataframe
print(nyc_flood.head())

# Take all column names and properly format
nyc_flood.columns = nyc_flood.columns.str.replace(' ','_').str.lower()

# Summarize missing data in columns
for x in nyc_flood.columns:
    print(f'There are {nyc_flood[x].isnull().sum()} missing values in {x}')

# Convert data into arrow format
feather_file = 'nyc_flood_feather.feather'
nyc_flood.to_feather(feather_file)
nyc_flood_feather = pd.read_feather(feather_file)

# See difference in sizes between feather and csv files
print(f'CSV file size: {os.path.getsize(csv_file) / (1024 * 1024)} MB')
print(f'Feather file size: {os.path.getsize(feather_file) / (1024 * 1024)} MB')

```

## Finding and Dropping Redundant Columns

```{python}

# Find redundant columns

# Noticed how the first five entries where of the same agency
# Tested to see if the entire column is the 'Department of 
# Environmental Protection'

print(nyc_flood_feather['agency_name'].value_counts())
# Every entry is identical, no need to keep the column

# Identify any empty columns
for x in nyc_flood.columns:
    print(f'There are {nyc_flood[x].isnull().sum()} missing values in {x}')

# The following columns are completely empty: 
# location_type, landmark, facility_type, due_date, vehicle_type,
#  taxi_company_borough, taxi_pick_up_location, 
# bridge_highway_name, bridge_highway_direction, road_ramp, 
# bridge_highway_segment

# From my prior experience with NYC Open Data, the 'location' is 
# redundant as it contains longitude and latitude coordinates which
#  have already been given

# Drop all columns deemed unnecessary
nyc_flood_feather.drop(columns=['agency_name', 'location_type', 'landmark', 'facility_type', 'due_date', 'vehicle_type', 'taxi_company_borough', 'taxi_pick_up_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment'], inplace=True)

# Get summary of new data
print(nyc_flood_feather.head())

```
